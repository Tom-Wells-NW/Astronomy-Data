// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Astronomy.Data.EF.Models;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace Astronomy.Data.EF.Data
{
    public partial class AstronomicalDataContext : DbContext
    {
        private string _astronomicalDataConnection = null;

        public AstronomicalDataContext() { }
       
        public AstronomicalDataContext(DbContextOptions<AstronomicalDataContext> options, IConfiguration configuration)
            : base(options)
        {
        }

        public virtual DbSet<HabHyg> HabHygs { get; set; }
        public virtual DbSet<HygDataV3> HygDataV3s { get; set; }
        public virtual DbSet<HygDatum> HygData { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.\\sql2019;Initial Catalog=Astronomical-Data;Integrated Security=True");

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<HabHyg>(entity =>
            {
                entity.ToTable("HabHYG", "Import");

                entity.Property(e => e.HabHygId).ValueGeneratedNever();

                entity.Property(e => e.BayerFlamsteed).HasMaxLength(50);

                entity.Property(e => e.Bd)
                    .HasMaxLength(50)
                    .HasColumnName("BD");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Display_Name");

                entity.Property(e => e.Gliese).HasMaxLength(50);

                entity.Property(e => e.Hd).HasColumnName("HD");

                entity.Property(e => e.Hr).HasColumnName("HR");

                entity.Property(e => e.ProperName)
                    .HasMaxLength(50)
                    .HasColumnName("Proper_Name");

                entity.Property(e => e.SpectralClass)
                    .HasMaxLength(50)
                    .HasColumnName("Spectral_Class");
            });

            modelBuilder.Entity<HygDataV3>(entity =>
            {
                entity.ToTable("HygData_V3", "Import");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Absmag).HasColumnName("absmag");

                entity.Property(e => e.Base)
                    .HasMaxLength(50)
                    .HasColumnName("base");

                entity.Property(e => e.Bayer)
                    .HasMaxLength(50)
                    .HasColumnName("bayer");

                entity.Property(e => e.Bf)
                    .HasMaxLength(50)
                    .HasColumnName("bf");

                entity.Property(e => e.Ci).HasColumnName("ci");

                entity.Property(e => e.Comp).HasColumnName("comp");

                entity.Property(e => e.CompPrimary).HasColumnName("comp_primary");

                entity.Property(e => e.Con)
                    .HasMaxLength(50)
                    .HasColumnName("con");

                entity.Property(e => e.Dec).HasColumnName("dec");

                entity.Property(e => e.Decrad).HasColumnName("decrad");

                entity.Property(e => e.Dist).HasColumnName("dist");

                entity.Property(e => e.Flam).HasColumnName("flam");

                entity.Property(e => e.Gl)
                    .HasMaxLength(50)
                    .HasColumnName("gl");

                entity.Property(e => e.Hd).HasColumnName("hd");

                entity.Property(e => e.Hip).HasColumnName("hip");

                entity.Property(e => e.Hr).HasColumnName("hr");

                entity.Property(e => e.Lum).HasColumnName("lum");

                entity.Property(e => e.Mag).HasColumnName("mag");

                entity.Property(e => e.Pmdec).HasColumnName("pmdec");

                entity.Property(e => e.Pmdecrad).HasColumnName("pmdecrad");

                entity.Property(e => e.Pmra).HasColumnName("pmra");

                entity.Property(e => e.Pmrarad).HasColumnName("pmrarad");

                entity.Property(e => e.Proper)
                    .HasMaxLength(50)
                    .HasColumnName("proper");

                entity.Property(e => e.Ra).HasColumnName("ra");

                entity.Property(e => e.Rarad).HasColumnName("rarad");

                entity.Property(e => e.Rv).HasColumnName("rv");

                entity.Property(e => e.Spect)
                    .HasMaxLength(50)
                    .HasColumnName("spect");

                entity.Property(e => e.Var)
                    .HasMaxLength(50)
                    .HasColumnName("var");

                entity.Property(e => e.VarMax)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("var_max");

                entity.Property(e => e.VarMin)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("var_min");

                entity.Property(e => e.Vx).HasColumnName("vx");

                entity.Property(e => e.Vy).HasColumnName("vy");

                entity.Property(e => e.Vz).HasColumnName("vz");

                entity.Property(e => e.X).HasColumnName("x");

                entity.Property(e => e.Y).HasColumnName("y");

                entity.Property(e => e.Z).HasColumnName("z");
            });

            modelBuilder.Entity<HygDatum>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BayerFlamsteed).HasMaxLength(50);

                entity.Property(e => e.GlieseCatalogId).HasMaxLength(50);

                entity.Property(e => e.ProperName).HasMaxLength(50);

                entity.Property(e => e.SpectralType).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}